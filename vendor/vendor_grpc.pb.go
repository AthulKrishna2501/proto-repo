// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: vendor/vendor.proto

package vendor

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	VendorSevice_RequestCategory_FullMethodName       = "/vendor.VendorSevice/RequestCategory"
	VendorSevice_ListCategory_FullMethodName          = "/vendor.VendorSevice/ListCategory"
	VendorSevice_ApproveRejectCategory_FullMethodName = "/vendor.VendorSevice/ApproveRejectCategory"
)

// VendorSeviceClient is the client API for VendorSevice service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VendorSeviceClient interface {
	RequestCategory(ctx context.Context, in *RequestCategoryRequest, opts ...grpc.CallOption) (*RequestCategoryResponse, error)
	ListCategory(ctx context.Context, in *ListCategoryRequest, opts ...grpc.CallOption) (*ListCategoryResponse, error)
	ApproveRejectCategory(ctx context.Context, in *ApproveRejectCategoryRequest, opts ...grpc.CallOption) (*ApproveRejectCategoryResponse, error)
}

type vendorSeviceClient struct {
	cc grpc.ClientConnInterface
}

func NewVendorSeviceClient(cc grpc.ClientConnInterface) VendorSeviceClient {
	return &vendorSeviceClient{cc}
}

func (c *vendorSeviceClient) RequestCategory(ctx context.Context, in *RequestCategoryRequest, opts ...grpc.CallOption) (*RequestCategoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RequestCategoryResponse)
	err := c.cc.Invoke(ctx, VendorSevice_RequestCategory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vendorSeviceClient) ListCategory(ctx context.Context, in *ListCategoryRequest, opts ...grpc.CallOption) (*ListCategoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListCategoryResponse)
	err := c.cc.Invoke(ctx, VendorSevice_ListCategory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vendorSeviceClient) ApproveRejectCategory(ctx context.Context, in *ApproveRejectCategoryRequest, opts ...grpc.CallOption) (*ApproveRejectCategoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApproveRejectCategoryResponse)
	err := c.cc.Invoke(ctx, VendorSevice_ApproveRejectCategory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VendorSeviceServer is the server API for VendorSevice service.
// All implementations must embed UnimplementedVendorSeviceServer
// for forward compatibility.
type VendorSeviceServer interface {
	RequestCategory(context.Context, *RequestCategoryRequest) (*RequestCategoryResponse, error)
	ListCategory(context.Context, *ListCategoryRequest) (*ListCategoryResponse, error)
	ApproveRejectCategory(context.Context, *ApproveRejectCategoryRequest) (*ApproveRejectCategoryResponse, error)
	mustEmbedUnimplementedVendorSeviceServer()
}

// UnimplementedVendorSeviceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedVendorSeviceServer struct{}

func (UnimplementedVendorSeviceServer) RequestCategory(context.Context, *RequestCategoryRequest) (*RequestCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestCategory not implemented")
}
func (UnimplementedVendorSeviceServer) ListCategory(context.Context, *ListCategoryRequest) (*ListCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCategory not implemented")
}
func (UnimplementedVendorSeviceServer) ApproveRejectCategory(context.Context, *ApproveRejectCategoryRequest) (*ApproveRejectCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApproveRejectCategory not implemented")
}
func (UnimplementedVendorSeviceServer) mustEmbedUnimplementedVendorSeviceServer() {}
func (UnimplementedVendorSeviceServer) testEmbeddedByValue()                      {}

// UnsafeVendorSeviceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VendorSeviceServer will
// result in compilation errors.
type UnsafeVendorSeviceServer interface {
	mustEmbedUnimplementedVendorSeviceServer()
}

func RegisterVendorSeviceServer(s grpc.ServiceRegistrar, srv VendorSeviceServer) {
	// If the following call pancis, it indicates UnimplementedVendorSeviceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&VendorSevice_ServiceDesc, srv)
}

func _VendorSevice_RequestCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VendorSeviceServer).RequestCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VendorSevice_RequestCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VendorSeviceServer).RequestCategory(ctx, req.(*RequestCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VendorSevice_ListCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VendorSeviceServer).ListCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VendorSevice_ListCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VendorSeviceServer).ListCategory(ctx, req.(*ListCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VendorSevice_ApproveRejectCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApproveRejectCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VendorSeviceServer).ApproveRejectCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VendorSevice_ApproveRejectCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VendorSeviceServer).ApproveRejectCategory(ctx, req.(*ApproveRejectCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// VendorSevice_ServiceDesc is the grpc.ServiceDesc for VendorSevice service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VendorSevice_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "vendor.VendorSevice",
	HandlerType: (*VendorSeviceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RequestCategory",
			Handler:    _VendorSevice_RequestCategory_Handler,
		},
		{
			MethodName: "ListCategory",
			Handler:    _VendorSevice_ListCategory_Handler,
		},
		{
			MethodName: "ApproveRejectCategory",
			Handler:    _VendorSevice_ApproveRejectCategory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "vendor/vendor.proto",
}
