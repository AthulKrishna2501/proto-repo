// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package client

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ClientServiceClient is the client API for ClientService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClientServiceClient interface {
	GetMasterOfCeremony(ctx context.Context, in *MasterOfCeremonyRequest, opts ...grpc.CallOption) (*MasterOfCeremonyResponse, error)
	HandleStripeEvent(ctx context.Context, in *StripeWebhookRequest, opts ...grpc.CallOption) (*StripeWebhookResponse, error)
	VerifyPayment(ctx context.Context, in *VerifyPaymentRequest, opts ...grpc.CallOption) (*VerifyPaymentResponse, error)
	ClientDashboard(ctx context.Context, in *LandingPageRequest, opts ...grpc.CallOption) (*LandingPageResponse, error)
	CreateEvent(ctx context.Context, in *CreateEventRequest, opts ...grpc.CallOption) (*CreateEventResponse, error)
	EditEvent(ctx context.Context, in *EditEventRequest, opts ...grpc.CallOption) (*EditEventResponse, error)
	GetClientProfile(ctx context.Context, in *GetClientProfileRequest, opts ...grpc.CallOption) (*GetClientProfileResponse, error)
	EditClientProfile(ctx context.Context, in *EditClientProfileRequest, opts ...grpc.CallOption) (*EditClientProfileResponse, error)
	ResetPassword(ctx context.Context, in *ResetPasswordRequest, opts ...grpc.CallOption) (*ResetPasswordResponse, error)
	GetBookings(ctx context.Context, in *GetBookingsRequest, opts ...grpc.CallOption) (*GetBookingsResponse, error)
	BookVendor(ctx context.Context, in *BookVendorRequest, opts ...grpc.CallOption) (*BookVendorResponse, error)
	GetVendorsByCategory(ctx context.Context, in *GetVendorsByCategoryRequest, opts ...grpc.CallOption) (*GetVendorsByCategoryResponse, error)
	GetHostedEvents(ctx context.Context, in *GetHostedEventsRequest, opts ...grpc.CallOption) (*GetHostedEventsResponse, error)
	GetUpcomingEvents(ctx context.Context, in *GetUpcomingEventsRequest, opts ...grpc.CallOption) (*GetUpcomingEventsResponse, error)
	GetVendorProfile(ctx context.Context, in *GetVendorProfileRequest, opts ...grpc.CallOption) (*GetVendorProfileResponse, error)
	AddReviewRatings(ctx context.Context, in *AddReviewRatingsRequest, opts ...grpc.CallOption) (*AddReviewRatingsResponse, error)
	EditReviewRatings(ctx context.Context, in *EditReviewRatingsRequest, opts ...grpc.CallOption) (*EditReviewRatingsResponse, error)
	ViewClientReviewRatings(ctx context.Context, in *ViewClientReviewRatingsRequest, opts ...grpc.CallOption) (*ViewClientReviewRatingsResponse, error)
	DeleteReviewRatings(ctx context.Context, in *DeleteReviewRequest, opts ...grpc.CallOption) (*DeleteReviewResponse, error)
}

type clientServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewClientServiceClient(cc grpc.ClientConnInterface) ClientServiceClient {
	return &clientServiceClient{cc}
}

func (c *clientServiceClient) GetMasterOfCeremony(ctx context.Context, in *MasterOfCeremonyRequest, opts ...grpc.CallOption) (*MasterOfCeremonyResponse, error) {
	out := new(MasterOfCeremonyResponse)
	err := c.cc.Invoke(ctx, "/client.ClientService/GetMasterOfCeremony", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientServiceClient) HandleStripeEvent(ctx context.Context, in *StripeWebhookRequest, opts ...grpc.CallOption) (*StripeWebhookResponse, error) {
	out := new(StripeWebhookResponse)
	err := c.cc.Invoke(ctx, "/client.ClientService/HandleStripeEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientServiceClient) VerifyPayment(ctx context.Context, in *VerifyPaymentRequest, opts ...grpc.CallOption) (*VerifyPaymentResponse, error) {
	out := new(VerifyPaymentResponse)
	err := c.cc.Invoke(ctx, "/client.ClientService/VerifyPayment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientServiceClient) ClientDashboard(ctx context.Context, in *LandingPageRequest, opts ...grpc.CallOption) (*LandingPageResponse, error) {
	out := new(LandingPageResponse)
	err := c.cc.Invoke(ctx, "/client.ClientService/ClientDashboard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientServiceClient) CreateEvent(ctx context.Context, in *CreateEventRequest, opts ...grpc.CallOption) (*CreateEventResponse, error) {
	out := new(CreateEventResponse)
	err := c.cc.Invoke(ctx, "/client.ClientService/CreateEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientServiceClient) EditEvent(ctx context.Context, in *EditEventRequest, opts ...grpc.CallOption) (*EditEventResponse, error) {
	out := new(EditEventResponse)
	err := c.cc.Invoke(ctx, "/client.ClientService/EditEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientServiceClient) GetClientProfile(ctx context.Context, in *GetClientProfileRequest, opts ...grpc.CallOption) (*GetClientProfileResponse, error) {
	out := new(GetClientProfileResponse)
	err := c.cc.Invoke(ctx, "/client.ClientService/GetClientProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientServiceClient) EditClientProfile(ctx context.Context, in *EditClientProfileRequest, opts ...grpc.CallOption) (*EditClientProfileResponse, error) {
	out := new(EditClientProfileResponse)
	err := c.cc.Invoke(ctx, "/client.ClientService/EditClientProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientServiceClient) ResetPassword(ctx context.Context, in *ResetPasswordRequest, opts ...grpc.CallOption) (*ResetPasswordResponse, error) {
	out := new(ResetPasswordResponse)
	err := c.cc.Invoke(ctx, "/client.ClientService/ResetPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientServiceClient) GetBookings(ctx context.Context, in *GetBookingsRequest, opts ...grpc.CallOption) (*GetBookingsResponse, error) {
	out := new(GetBookingsResponse)
	err := c.cc.Invoke(ctx, "/client.ClientService/GetBookings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientServiceClient) BookVendor(ctx context.Context, in *BookVendorRequest, opts ...grpc.CallOption) (*BookVendorResponse, error) {
	out := new(BookVendorResponse)
	err := c.cc.Invoke(ctx, "/client.ClientService/BookVendor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientServiceClient) GetVendorsByCategory(ctx context.Context, in *GetVendorsByCategoryRequest, opts ...grpc.CallOption) (*GetVendorsByCategoryResponse, error) {
	out := new(GetVendorsByCategoryResponse)
	err := c.cc.Invoke(ctx, "/client.ClientService/GetVendorsByCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientServiceClient) GetHostedEvents(ctx context.Context, in *GetHostedEventsRequest, opts ...grpc.CallOption) (*GetHostedEventsResponse, error) {
	out := new(GetHostedEventsResponse)
	err := c.cc.Invoke(ctx, "/client.ClientService/GetHostedEvents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientServiceClient) GetUpcomingEvents(ctx context.Context, in *GetUpcomingEventsRequest, opts ...grpc.CallOption) (*GetUpcomingEventsResponse, error) {
	out := new(GetUpcomingEventsResponse)
	err := c.cc.Invoke(ctx, "/client.ClientService/GetUpcomingEvents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientServiceClient) GetVendorProfile(ctx context.Context, in *GetVendorProfileRequest, opts ...grpc.CallOption) (*GetVendorProfileResponse, error) {
	out := new(GetVendorProfileResponse)
	err := c.cc.Invoke(ctx, "/client.ClientService/GetVendorProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientServiceClient) AddReviewRatings(ctx context.Context, in *AddReviewRatingsRequest, opts ...grpc.CallOption) (*AddReviewRatingsResponse, error) {
	out := new(AddReviewRatingsResponse)
	err := c.cc.Invoke(ctx, "/client.ClientService/AddReviewRatings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientServiceClient) EditReviewRatings(ctx context.Context, in *EditReviewRatingsRequest, opts ...grpc.CallOption) (*EditReviewRatingsResponse, error) {
	out := new(EditReviewRatingsResponse)
	err := c.cc.Invoke(ctx, "/client.ClientService/EditReviewRatings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientServiceClient) ViewClientReviewRatings(ctx context.Context, in *ViewClientReviewRatingsRequest, opts ...grpc.CallOption) (*ViewClientReviewRatingsResponse, error) {
	out := new(ViewClientReviewRatingsResponse)
	err := c.cc.Invoke(ctx, "/client.ClientService/ViewClientReviewRatings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientServiceClient) DeleteReviewRatings(ctx context.Context, in *DeleteReviewRequest, opts ...grpc.CallOption) (*DeleteReviewResponse, error) {
	out := new(DeleteReviewResponse)
	err := c.cc.Invoke(ctx, "/client.ClientService/DeleteReviewRatings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClientServiceServer is the server API for ClientService service.
// All implementations must embed UnimplementedClientServiceServer
// for forward compatibility
type ClientServiceServer interface {
	GetMasterOfCeremony(context.Context, *MasterOfCeremonyRequest) (*MasterOfCeremonyResponse, error)
	HandleStripeEvent(context.Context, *StripeWebhookRequest) (*StripeWebhookResponse, error)
	VerifyPayment(context.Context, *VerifyPaymentRequest) (*VerifyPaymentResponse, error)
	ClientDashboard(context.Context, *LandingPageRequest) (*LandingPageResponse, error)
	CreateEvent(context.Context, *CreateEventRequest) (*CreateEventResponse, error)
	EditEvent(context.Context, *EditEventRequest) (*EditEventResponse, error)
	GetClientProfile(context.Context, *GetClientProfileRequest) (*GetClientProfileResponse, error)
	EditClientProfile(context.Context, *EditClientProfileRequest) (*EditClientProfileResponse, error)
	ResetPassword(context.Context, *ResetPasswordRequest) (*ResetPasswordResponse, error)
	GetBookings(context.Context, *GetBookingsRequest) (*GetBookingsResponse, error)
	BookVendor(context.Context, *BookVendorRequest) (*BookVendorResponse, error)
	GetVendorsByCategory(context.Context, *GetVendorsByCategoryRequest) (*GetVendorsByCategoryResponse, error)
	GetHostedEvents(context.Context, *GetHostedEventsRequest) (*GetHostedEventsResponse, error)
	GetUpcomingEvents(context.Context, *GetUpcomingEventsRequest) (*GetUpcomingEventsResponse, error)
	GetVendorProfile(context.Context, *GetVendorProfileRequest) (*GetVendorProfileResponse, error)
	AddReviewRatings(context.Context, *AddReviewRatingsRequest) (*AddReviewRatingsResponse, error)
	EditReviewRatings(context.Context, *EditReviewRatingsRequest) (*EditReviewRatingsResponse, error)
	ViewClientReviewRatings(context.Context, *ViewClientReviewRatingsRequest) (*ViewClientReviewRatingsResponse, error)
	DeleteReviewRatings(context.Context, *DeleteReviewRequest) (*DeleteReviewResponse, error)
	mustEmbedUnimplementedClientServiceServer()
}

// UnimplementedClientServiceServer must be embedded to have forward compatible implementations.
type UnimplementedClientServiceServer struct {
}

func (UnimplementedClientServiceServer) GetMasterOfCeremony(context.Context, *MasterOfCeremonyRequest) (*MasterOfCeremonyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMasterOfCeremony not implemented")
}
func (UnimplementedClientServiceServer) HandleStripeEvent(context.Context, *StripeWebhookRequest) (*StripeWebhookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleStripeEvent not implemented")
}
func (UnimplementedClientServiceServer) VerifyPayment(context.Context, *VerifyPaymentRequest) (*VerifyPaymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyPayment not implemented")
}
func (UnimplementedClientServiceServer) ClientDashboard(context.Context, *LandingPageRequest) (*LandingPageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClientDashboard not implemented")
}
func (UnimplementedClientServiceServer) CreateEvent(context.Context, *CreateEventRequest) (*CreateEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEvent not implemented")
}
func (UnimplementedClientServiceServer) EditEvent(context.Context, *EditEventRequest) (*EditEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditEvent not implemented")
}
func (UnimplementedClientServiceServer) GetClientProfile(context.Context, *GetClientProfileRequest) (*GetClientProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClientProfile not implemented")
}
func (UnimplementedClientServiceServer) EditClientProfile(context.Context, *EditClientProfileRequest) (*EditClientProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditClientProfile not implemented")
}
func (UnimplementedClientServiceServer) ResetPassword(context.Context, *ResetPasswordRequest) (*ResetPasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetPassword not implemented")
}
func (UnimplementedClientServiceServer) GetBookings(context.Context, *GetBookingsRequest) (*GetBookingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBookings not implemented")
}
func (UnimplementedClientServiceServer) BookVendor(context.Context, *BookVendorRequest) (*BookVendorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BookVendor not implemented")
}
func (UnimplementedClientServiceServer) GetVendorsByCategory(context.Context, *GetVendorsByCategoryRequest) (*GetVendorsByCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVendorsByCategory not implemented")
}
func (UnimplementedClientServiceServer) GetHostedEvents(context.Context, *GetHostedEventsRequest) (*GetHostedEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHostedEvents not implemented")
}
func (UnimplementedClientServiceServer) GetUpcomingEvents(context.Context, *GetUpcomingEventsRequest) (*GetUpcomingEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUpcomingEvents not implemented")
}
func (UnimplementedClientServiceServer) GetVendorProfile(context.Context, *GetVendorProfileRequest) (*GetVendorProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVendorProfile not implemented")
}
func (UnimplementedClientServiceServer) AddReviewRatings(context.Context, *AddReviewRatingsRequest) (*AddReviewRatingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddReviewRatings not implemented")
}
func (UnimplementedClientServiceServer) EditReviewRatings(context.Context, *EditReviewRatingsRequest) (*EditReviewRatingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditReviewRatings not implemented")
}
func (UnimplementedClientServiceServer) ViewClientReviewRatings(context.Context, *ViewClientReviewRatingsRequest) (*ViewClientReviewRatingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ViewClientReviewRatings not implemented")
}
func (UnimplementedClientServiceServer) DeleteReviewRatings(context.Context, *DeleteReviewRequest) (*DeleteReviewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteReviewRatings not implemented")
}
func (UnimplementedClientServiceServer) mustEmbedUnimplementedClientServiceServer() {}

// UnsafeClientServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClientServiceServer will
// result in compilation errors.
type UnsafeClientServiceServer interface {
	mustEmbedUnimplementedClientServiceServer()
}

func RegisterClientServiceServer(s grpc.ServiceRegistrar, srv ClientServiceServer) {
	s.RegisterService(&ClientService_ServiceDesc, srv)
}

func _ClientService_GetMasterOfCeremony_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MasterOfCeremonyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServiceServer).GetMasterOfCeremony(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/client.ClientService/GetMasterOfCeremony",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServiceServer).GetMasterOfCeremony(ctx, req.(*MasterOfCeremonyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientService_HandleStripeEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StripeWebhookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServiceServer).HandleStripeEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/client.ClientService/HandleStripeEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServiceServer).HandleStripeEvent(ctx, req.(*StripeWebhookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientService_VerifyPayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyPaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServiceServer).VerifyPayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/client.ClientService/VerifyPayment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServiceServer).VerifyPayment(ctx, req.(*VerifyPaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientService_ClientDashboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LandingPageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServiceServer).ClientDashboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/client.ClientService/ClientDashboard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServiceServer).ClientDashboard(ctx, req.(*LandingPageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientService_CreateEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServiceServer).CreateEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/client.ClientService/CreateEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServiceServer).CreateEvent(ctx, req.(*CreateEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientService_EditEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServiceServer).EditEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/client.ClientService/EditEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServiceServer).EditEvent(ctx, req.(*EditEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientService_GetClientProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClientProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServiceServer).GetClientProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/client.ClientService/GetClientProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServiceServer).GetClientProfile(ctx, req.(*GetClientProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientService_EditClientProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditClientProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServiceServer).EditClientProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/client.ClientService/EditClientProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServiceServer).EditClientProfile(ctx, req.(*EditClientProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientService_ResetPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServiceServer).ResetPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/client.ClientService/ResetPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServiceServer).ResetPassword(ctx, req.(*ResetPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientService_GetBookings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBookingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServiceServer).GetBookings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/client.ClientService/GetBookings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServiceServer).GetBookings(ctx, req.(*GetBookingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientService_BookVendor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookVendorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServiceServer).BookVendor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/client.ClientService/BookVendor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServiceServer).BookVendor(ctx, req.(*BookVendorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientService_GetVendorsByCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVendorsByCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServiceServer).GetVendorsByCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/client.ClientService/GetVendorsByCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServiceServer).GetVendorsByCategory(ctx, req.(*GetVendorsByCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientService_GetHostedEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHostedEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServiceServer).GetHostedEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/client.ClientService/GetHostedEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServiceServer).GetHostedEvents(ctx, req.(*GetHostedEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientService_GetUpcomingEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUpcomingEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServiceServer).GetUpcomingEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/client.ClientService/GetUpcomingEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServiceServer).GetUpcomingEvents(ctx, req.(*GetUpcomingEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientService_GetVendorProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVendorProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServiceServer).GetVendorProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/client.ClientService/GetVendorProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServiceServer).GetVendorProfile(ctx, req.(*GetVendorProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientService_AddReviewRatings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddReviewRatingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServiceServer).AddReviewRatings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/client.ClientService/AddReviewRatings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServiceServer).AddReviewRatings(ctx, req.(*AddReviewRatingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientService_EditReviewRatings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditReviewRatingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServiceServer).EditReviewRatings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/client.ClientService/EditReviewRatings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServiceServer).EditReviewRatings(ctx, req.(*EditReviewRatingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientService_ViewClientReviewRatings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ViewClientReviewRatingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServiceServer).ViewClientReviewRatings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/client.ClientService/ViewClientReviewRatings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServiceServer).ViewClientReviewRatings(ctx, req.(*ViewClientReviewRatingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientService_DeleteReviewRatings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteReviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServiceServer).DeleteReviewRatings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/client.ClientService/DeleteReviewRatings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServiceServer).DeleteReviewRatings(ctx, req.(*DeleteReviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ClientService_ServiceDesc is the grpc.ServiceDesc for ClientService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClientService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "client.ClientService",
	HandlerType: (*ClientServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMasterOfCeremony",
			Handler:    _ClientService_GetMasterOfCeremony_Handler,
		},
		{
			MethodName: "HandleStripeEvent",
			Handler:    _ClientService_HandleStripeEvent_Handler,
		},
		{
			MethodName: "VerifyPayment",
			Handler:    _ClientService_VerifyPayment_Handler,
		},
		{
			MethodName: "ClientDashboard",
			Handler:    _ClientService_ClientDashboard_Handler,
		},
		{
			MethodName: "CreateEvent",
			Handler:    _ClientService_CreateEvent_Handler,
		},
		{
			MethodName: "EditEvent",
			Handler:    _ClientService_EditEvent_Handler,
		},
		{
			MethodName: "GetClientProfile",
			Handler:    _ClientService_GetClientProfile_Handler,
		},
		{
			MethodName: "EditClientProfile",
			Handler:    _ClientService_EditClientProfile_Handler,
		},
		{
			MethodName: "ResetPassword",
			Handler:    _ClientService_ResetPassword_Handler,
		},
		{
			MethodName: "GetBookings",
			Handler:    _ClientService_GetBookings_Handler,
		},
		{
			MethodName: "BookVendor",
			Handler:    _ClientService_BookVendor_Handler,
		},
		{
			MethodName: "GetVendorsByCategory",
			Handler:    _ClientService_GetVendorsByCategory_Handler,
		},
		{
			MethodName: "GetHostedEvents",
			Handler:    _ClientService_GetHostedEvents_Handler,
		},
		{
			MethodName: "GetUpcomingEvents",
			Handler:    _ClientService_GetUpcomingEvents_Handler,
		},
		{
			MethodName: "GetVendorProfile",
			Handler:    _ClientService_GetVendorProfile_Handler,
		},
		{
			MethodName: "AddReviewRatings",
			Handler:    _ClientService_AddReviewRatings_Handler,
		},
		{
			MethodName: "EditReviewRatings",
			Handler:    _ClientService_EditReviewRatings_Handler,
		},
		{
			MethodName: "ViewClientReviewRatings",
			Handler:    _ClientService_ViewClientReviewRatings_Handler,
		},
		{
			MethodName: "DeleteReviewRatings",
			Handler:    _ClientService_DeleteReviewRatings_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "client/client.proto",
}
